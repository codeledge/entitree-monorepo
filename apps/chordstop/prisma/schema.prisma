// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Chord {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  numericId  Int?    @unique
  title      String
  lastedit   String?
  category   String?
  hits       Int?
  body       String
  open       Int?
  artist     Artist? @relation(fields: [artistId], references: [id])
  artistId   String?
  wikidataId String? @unique
  duration   Int?
}

model Artist {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  numericId        Int?    @unique
  label            String  @unique
  wikidataId       String  @unique
  ultimateGuitarId String?
  wikipediaSlugEn  String?
  spotifyArtistId  String?
  appleArtistID    String?
  twitterUsername  String?
  imageCommons     String?
  chords           Chord[]
}

//https://next-auth.js.org/adapters/prisma
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
