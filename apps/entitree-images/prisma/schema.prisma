generator client {
  provider        = "prisma-client-js"
  output          = "./generated/client"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URI")
}

model Image {
  id                        Int          @id @default(autoincrement())
  comment                   String?
  createdAt                 DateTime     @default(now()) @db.Date
  createdById               Int?
  faceDetectionGoogleVision Json?
  fileSize                  Int?
  internalFileName          String?
  mimetype                  String?
  name                      String?
  originalFilename          String?
  recordedDate              DateTime?    @db.Date
  sourceUrl                 String?
  statusBackgroundRemoval   ActionStatus @default(PotentialActionStatus)
  statusGoogleFaceDetection ActionStatus @default(PotentialActionStatus)
  statusImageCropping       ActionStatus @default(PotentialActionStatus)
  updatedAt                 DateTime     @default(now()) @db.Date
  uploadSite                String       @default("images.entitree.com")
  viewCount                 Int          @default(0)
  wikidataEntity            Int
  wikidataLabel             String?
  wikidataP31               String?
  priority                  Int          @default(0)
  createdBy                 User?        @relation(fields: [createdById], references: [id], onDelete: Cascade)
}

//https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  updatedAt     DateTime? @db.Date

  accounts Account[]
  sessions Session[]
  Image    Image[]
}

enum Role {
  ADMIN
  USER
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Stat {
  id     Int    @id @default(autoincrement())
  count  Int
  metric Metric
  month  String

  @@unique([metric, month])
}

enum Metric {
  googleCloudVisionFaceDetection
  backgroundRemoval
  apiCalled
}

enum ActionStatus {
  PotentialActionStatus
  CompletedActionStatus
  FailedActionStatus
  ActiveActionStatus
}
